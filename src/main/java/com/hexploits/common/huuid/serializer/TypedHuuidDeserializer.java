package com.hexploits.common.huuid.serializer;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.hexploits.common.huuid.Huuid;
import java.lang.reflect.Constructor;
import java.util.UUID;

public class TypedHuuidDeserializer extends JsonDeserializer<Huuid> implements ContextualDeserializer {

  private JavaType typedUidType;

  @Override
  public Huuid deserialize(JsonParser parser, DeserializationContext context) {
    Constructor<?> constructor = getConstructor(typedUidType.getRawClass());

    try {
      return (Huuid) constructor.newInstance(UUID.fromString(parser.getText()));
    } catch (Exception e) {
      throw new IllegalStateException("Cannot deserialize TypedUuid [" + typedUidType.getTypeName() + "]", e);
    }
  }

  private Constructor<?> getConstructor(Class<?> rawClass) {
    try {
      return rawClass.getConstructor(UUID.class);
    } catch (NoSuchMethodException e) {
      throw new IllegalStateException("No constructor for TypedUuid [" + handledType().getSimpleName() + "]", e);
    }
  }

  @Override
  public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) {
    if (ctxt.getContextualType() != null) {
      typedUidType = ctxt.getContextualType();
    } else if (property != null) {
      typedUidType = property.getType();
    }

    return this;
  }
}

